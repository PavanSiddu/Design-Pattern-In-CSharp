using System;

namespace DesignPattern.BehaviouralDesignPattern.ChainOfResponsibilityPattern
{
    public class Client
    {
        public static void Main(string[] args)
        {
            IHandler vehicleHandler = GetValidationHandler();
            string incomingSuspect = "AMBULANCE";

            //problem Code
            //if (incomingSuspect.Equals("CIVILIAN_SUV"))
            //{
            //    Console.WriteLine("Validate id.");
            //    Console.WriteLine("Do exhaustive search.");
            //    Console.WriteLine("Minor interrogation.");
            //}
            //else if (incomingSuspect.Equals("FIRE_TRUCK"))
            //{
            //    Console.WriteLine("Validate id.");
            //}
            //else if (incomingSuspect.Equals("AMBULANCE"))
            //{
            //    Console.WriteLine("Validate id quickly.");
            //    Console.WriteLine("Let go.");
            //}
            //else
            //{
            //    Console.WriteLine("Stop right there.");
            //}

            vehicleHandler.Handle(incomingSuspect);

            Console.ReadLine();
        }

        public static IHandler GetValidationHandler()
        {
            IHandler civilianHandler = new CivilianVehicleHandler();
            IHandler fireTruckHandler = new FireTruckHandler();
            IHandler ambulanceHandler = new AmbulanceHandler();

            civilianHandler.SetNextHandler(fireTruckHandler);
            fireTruckHandler.SetNextHandler(ambulanceHandler);

            return civilianHandler;
        }
    }
    //The Chain of Responsibility Design Pattern is a Behavioral Design Pattern.
    //Behavioural patterns are those design patterns that describe and identify the interactions between different objects.
    //It is also known as the Chain of command Design Pattern.
    //It makes use of chain handler objects to handle a request generated by a client.
}
